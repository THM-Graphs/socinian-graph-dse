# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Deployment

on:
  push:
    branches: ["develop"]
  workflow_dispatch:

jobs:
  build:
    name: build the project
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json
      - run: npm ci --force
        working-directory: "./client"
      - run: npm run build
        working-directory: "./client"

      - run: npm ci
        working-directory: "./server"
      - run: npm run compile
        working-directory: "./server"

      - name: Create environment file
        env:
          HOST: ${{ secrets.DEV_NEO4J_HOST }}
          USERNAME: ${{ secrets.DEV_NEO4J_USERNAME }}
          PASSWORD: ${{ secrets.DEV_NEO4J_PASSWORD }}
        run: |
          sed -i -e '$a\' .env
          echo NEO4J_HOST=$HOST >> .env
          echo NEO4J_USERNAME=$USERNAME >> .env
          echo NEO4J_PASSWORD=$PASSWORD >> .env
        working-directory: "./server"

      - name: Create directory structure for deployment
        run: |
          mkdir -p development-deploy/client
          mkdir -p development-deploy/server
          cp -r client/dist development-deploy/client/
          cp -r server development-deploy/
        working-directory: ${{ github.workspace }}

      - name: Zip artifact for deployment
        run: zip development-deploy.zip ./development-deploy -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: development-artifact
          path: /home/runner/work/socinian-graph-dse/socinian-graph-dse/development-deploy.zip

  deploy-dev:
    name: deploy to development server
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: development-artifact

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{secrets.DEV_SSH_KEY}}
          known_hosts: ${{secrets.DEV_KNOWN_HOSTS}}
      - name: ssh-scp-ssh-pipelines
        uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
        with:
          host: ${{secrets.DEV_SSH_HOST}}
          user: ${{ secrets.DEV_SSH_USER }}
          key: ${{secrets.DEV_SSH_KEY}}
          first_ssh: |
            cd ${{ secrets.SSH_PATH }}
            pm2 delete --silent "GraphQL Dev" || :
            rm -r * || :
          scp: /home/runner/work/socinian-graph-dse/socinian-graph-dse/development-deploy.zip => ${{ secrets.SSH_PATH }}
          last_ssh: |
            cd ${{ secrets.SSH_PATH }}
            mkdir temp_folder
            unzip development-deploy.zip -d temp_folder
            mv temp_folder/development-deploy/client ./
            mv temp_folder/development-deploy/server ./
            rm -r temp_folder
            cd server
            npm ci
            pm2 start npm --name "GraphQL Dev" -- start
            pm2 save
